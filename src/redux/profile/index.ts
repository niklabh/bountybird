// Copyright 2019-2025 @polka-labs/townhall authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

import { PayloadAction, createSlice } from '@reduxjs/toolkit';
import { HYDRATE } from 'next-redux-wrapper';
import { IEditableProfile, IProfileStore } from './@types';
import { User } from '@privy-io/react-auth';
import { IUser } from '@/src/types';

const initialState: IProfileStore = {
	error: null,
	loading: false,
	privy_loading: false,
	user: null
};

type IEditableProfilePayload = {
    [K in keyof IEditableProfile]: {
      key: K;
      value: IEditableProfile[K];
    }
}[keyof IEditableProfile];

export const profileStore = createSlice({
	extraReducers: (builder) => {
		builder.addCase(HYDRATE, (state, action) => {
			console.log('hydrate profile', (action as PayloadAction<any>).payload);
			return {
				...state,
				...(action as PayloadAction<any>).payload.profile
			};
		});
	},
	initialState,
	name: 'profile',
	reducers: {
		setError: (state, action: PayloadAction<string | null>) => {
			state.error = action.payload;
		},
		setBio: (state, action: PayloadAction<string>) => {
			const obj = action.payload;
			if (state.user) {
				state.user.bio = obj;
			}
		},
		setName: (state, action: PayloadAction<string>) => {
			const obj = action.payload;
			if (state.user) {
				state.user.name = obj;
			}
		},
		setUsername: (state, action: PayloadAction<string>) => {
			const obj = action.payload;
			if (state.user) {
				state.user.username = obj;
			}
		},
		setLensHandle: (state, action: PayloadAction<string>) => {
			const obj = action.payload;
			if (state.user) {
				state.user.lens_handle = obj;
			}
		},
		setLoading: (state, action: PayloadAction<boolean>) => {
			state.loading = action.payload;
		},
		setPrivyLoading: (state, action: PayloadAction<boolean>) => {
			state.privy_loading = action.payload;
		},
		setPrivyUser: (state, action: PayloadAction<User | null>) => {
			const privyUser = action.payload;
			if (!state.user) {
				state.user = {
					bio: null,
					id: privyUser?.id || '',
					img_url: null,
					is_username_autogenerated: false,
					name: null,
					username: null
				};
			}
			(state as any).user.privy_user = JSON.parse(JSON.stringify(privyUser));
		},
		setUser: (state, action: PayloadAction<IUser | null>) => {
			const newUser = action.payload;
			if (newUser?.privy_user) {
				newUser.privy_user = JSON.parse(JSON.stringify(newUser.privy_user));
			}
			state.user = newUser;
		}
	}
});

export default profileStore.reducer;
const profileActions = profileStore.actions;
export {
	profileActions
};