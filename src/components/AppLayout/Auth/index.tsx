import { profileActions } from '@/src/redux/profile';
import { IUser, NotificationStatus } from '@/src/types';
import privyLogin from '@/src/utils/privyLogin';
import { useLogin, useLogout } from '@privy-io/react-auth';
import { useRouter } from 'next/router';
import React from 'react'
import { useDispatch } from 'react-redux';
import queueNotification from '../../ui-components/QueueNotification';
import AuthWrapper from './AuthWrapper';

const Auth = () => {
	const router = useRouter();
	const dispatch = useDispatch();

	const { login } = useLogin({
		onComplete(user, isNewUser, wasAlreadyAuthenticated, loginMethod) {
			if (!wasAlreadyAuthenticated && loginMethod !== null) {
				(async () => {
					dispatch(profileActions.setPrivyLoading(true));
					try {
						const { data } = await privyLogin<IUser>();
						if (data) {
							dispatch(profileActions.setUser(data));
							setTimeout(() => {
								if (data?.is_username_autogenerated) {
									router?.push("/profile/update");
								}
							}, 1000)
						} else {
							await logout();
							queueNotification({
								header: "Error!",
								message: 'Error fetching user info.',
								status: NotificationStatus.ERROR,
							});
							// LOGOUT API CALL
						}
					} catch (error) {
						queueNotification({
							header: "Error!",
							message: error,
							status: NotificationStatus.ERROR,
						});
						await logout();
					}
					dispatch(profileActions.setPrivyLoading(false));
				})();
			}
		},
		onError(error) {
			queueNotification({
				header: "Error!",
				message: error,
				status: NotificationStatus.ERROR,
			});
			(async () => {
				await logout();
			})();
		}
	});

	const { logout } = useLogout({
		onSuccess: () => {
			dispatch(profileActions.setUser(null));
			setTimeout(() => {
				router.push("/");
			}, 200);
		},
	});

    return (
        <AuthWrapper
            login={login}
            logout={logout}
        />
    )
}

export default Auth