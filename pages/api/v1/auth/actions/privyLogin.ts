// Copyright 2019-2025 @polka-labs/townhall authors & contributors
// This software may be modified and distributed under the terms
// of the Apache-2.0 license. See the LICENSE file for details.

import withErrorHandling from '@/src/api-middlewares/withErrorHandling';
import apiErrorWithStatusCode from '@/src/api-utils/apiErrorWithStatusCode';
import getTokenFromReq from '@/src/api-utils/getTokenFromReq';
import Privy from '@/src/services/Privy';
import { IApiSuccessResponse, IApiErrorResponse, IUser } from '@/src/types';
import { userDocRef } from '@/src/utils/firestore_refs';
import getErrorMessage, { getErrorStatus } from '@/src/utils/getErrorMessage';
import messages from '@/src/utils/messages';
import { StatusCodes } from 'http-status-codes';
import { NextApiHandler } from 'next';
import { v4 as uuidv4 } from 'uuid';

export interface IPrivyLoginBody {}


const handler: NextApiHandler<
IUser | IApiErrorResponse
> = async (req, res) => {
	if (req.method !== 'POST') {
		return res.status(StatusCodes.METHOD_NOT_ALLOWED).json({ error: 'Only POST method allowed.' });
	}

    const token = getTokenFromReq(req);
  
    if (!token) {
      return res.status(400).json({ error: "Token missing" });
    }
  
    const privy = new Privy();
    const userId = await privy.getUserId(token);
  
    if(!userId) {
      return res.status(400).json({ error: "Invalid token" });
    }

    let user_info: IUser = await privy.getTownhallUser(userId) as any;
    if (!user_info) {
        user_info = {
            bio: null,
            created_at: new Date(),
            id: userId,
            img_url: null,
            is_username_autogenerated: null,
            lens_handle: null,
            name: null,
            privy_user: null,
            updated_at: new Date(),
            username: null,
            wishlist: []
        };
    }
    const privyUser = await privy.getPrivyUser(userId);
    user_info.privy_user = JSON.parse(JSON.stringify(privyUser));

	if (!user_info?.created_at) {
		user_info.created_at = new Date();
	}

	user_info.updated_at = new Date();

	if (!user_info?.username) {
		const username = uuidv4().split('-').join('').substring(0, 25);
		user_info.username = username;
		user_info.is_username_autogenerated = true;
	}

	await userDocRef(userId).set(user_info, { merge: true });

	res.status(StatusCodes.OK).json(user_info);
};

export default withErrorHandling(handler);